/*소수 찾기
문제 설명
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

제한 조건
n은 2이상 1000000이하의 자연수입니다.
입출력 예
n	result
10	4
5	3
입출력 예 설명
입출력 예 #1
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

입출력 예 #2
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환

素数の検索
問題の説明
1から入力された数字nの間にある素数の数を返す関数、solutionを作成してください。

素数は1と自分自身にだけ分かれることを意味します。
（1は少数ではない。）

制限条件
nは2以上1000000以下の自然数です。
入出力の例
n result
10 4
5 3
入出力例の説明
入出力例＃1
1から10の間の数は、[2,3,5,7]の4つ存在するので、4を返し

入出力例＃2
1から5までの数は[2,3,5] 3つ存在するので、3を返し
*/

function solution(n) {
  const arr = [];
  for (let i = 1; i <= n; i++) arr.push(i);
  
  for (let i = 1; i * i < n; i++) {
      if (arr[i]) {
          let num = arr[i];
          for (let j = num * num; j <= n; j+= num) {
              arr[j -1] = 0;
          }
      }
  }
  let answer = arr.filter((number) => number);
  answer.shift();
  return answer.length;
};